/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  MystikoRollerRegistryProxy,
  MystikoRollerRegistryProxyInterface,
} from '../../../../../contracts/Settings/miner/proxy/MystikoRollerRegistryProxy';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_center',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_registry',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'NotChanged',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OnlyMystikoDAO',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'registry',
        type: 'address',
      },
    ],
    name: 'RollerRegistryChanged',
    type: 'event',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'pool',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'roller',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'rollupSize',
            type: 'uint256',
          },
        ],
        internalType: 'struct CanDoRollupParams',
        name: '_params',
        type: 'tuple',
      },
    ],
    name: 'canDoRollup',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'center',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_newRegistry',
        type: 'address',
      },
    ],
    name: 'changeRollerRegistry',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'registry',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161041938038061041983398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b61035b806100be6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631f02d715146100515780637b10399914610081578063b474c10c14610094578063dd53f8a1146100a9575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600154610064906001600160a01b031681565b6100a76100a2366004610268565b6100cc565b005b6100bc6100b736600461028c565b6101d8565b6040519015158152602001610078565b600054604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa158015610115573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013991906102a4565b6001600160a01b0316146101605760405163177bc95160e11b815260040160405180910390fd5b6001546001600160a01b0380831691160361018e576040516336a1c33f60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f92e50816b03798f7049608b42acd59748185fa0c0844c2e29fe3e722454033b590600090a250565b60015460405163dd53f8a160e01b81526000916001600160a01b03169063dd53f8a1906102099085906004016102c1565b602060405180830381865afa158015610226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024a9190610303565b92915050565b6001600160a01b038116811461026557600080fd5b50565b60006020828403121561027a57600080fd5b813561028581610250565b9392505050565b60006060828403121561029e57600080fd5b50919050565b6000602082840312156102b657600080fd5b815161028581610250565b6060810182356102d081610250565b6001600160a01b0390811683526020840135906102ec82610250565b166020830152604092830135929091019190915290565b60006020828403121561031557600080fd5b8151801515811461028557600080fdfea2646970667358221220aa1f7961fb4ea423582e1e78f87cecbceefd19a8c478b0f178d09372b05436bb64736f6c63430008140033';

type MystikoRollerRegistryProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MystikoRollerRegistryProxyConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MystikoRollerRegistryProxy__factory extends ContractFactory {
  constructor(...args: MystikoRollerRegistryProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _center: string,
    _registry: string,
    overrides?: Overrides & { from?: string },
  ): Promise<MystikoRollerRegistryProxy> {
    return super.deploy(_center, _registry, overrides || {}) as Promise<MystikoRollerRegistryProxy>;
  }
  override getDeployTransaction(
    _center: string,
    _registry: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(_center, _registry, overrides || {});
  }
  override attach(address: string): MystikoRollerRegistryProxy {
    return super.attach(address) as MystikoRollerRegistryProxy;
  }
  override connect(signer: Signer): MystikoRollerRegistryProxy__factory {
    return super.connect(signer) as MystikoRollerRegistryProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MystikoRollerRegistryProxyInterface {
    return new utils.Interface(_abi) as MystikoRollerRegistryProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MystikoRollerRegistryProxy {
    return new Contract(address, _abi, signerOrProvider) as MystikoRollerRegistryProxy;
  }
}
