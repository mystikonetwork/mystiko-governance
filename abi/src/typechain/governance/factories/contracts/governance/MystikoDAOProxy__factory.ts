/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type {
  MystikoDAOProxy,
  MystikoDAOProxyInterface,
} from '../../../contracts/governance/MystikoDAOProxy';

const _abi = [
  {
    inputs: [],
    name: 'NotChanged',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OnlyMystikoDAO',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'registry',
        type: 'address',
      },
    ],
    name: 'RegistryChanged',
    type: 'event',
  },
  {
    inputs: [],
    name: 'center',
    outputs: [
      {
        internalType: 'contract IMystikoGovernorCenter',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_newRegistry',
        type: 'address',
      },
    ],
    name: 'changeRegistry',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'registry',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

export class MystikoDAOProxy__factory {
  static readonly abi = _abi;
  static createInterface(): MystikoDAOProxyInterface {
    return new utils.Interface(_abi) as MystikoDAOProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MystikoDAOProxy {
    return new Contract(address, _abi, signerOrProvider) as MystikoDAOProxy;
  }
}
