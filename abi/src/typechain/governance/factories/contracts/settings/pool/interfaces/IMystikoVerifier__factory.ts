/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type {
  IMystikoVerifier,
  IMystikoVerifierInterface,
} from '../../../../../contracts/settings/pool/interfaces/IMystikoVerifier';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_rollupSize',
        type: 'uint32',
      },
    ],
    name: 'queryRollupVerifier',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'verifier',
            type: 'address',
          },
          {
            internalType: 'bool',
            name: 'enabled',
            type: 'bool',
          },
        ],
        internalType: 'struct WrappedVerifier',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_numInputs',
        type: 'uint32',
      },
      {
        internalType: 'uint32',
        name: '_numOutputs',
        type: 'uint32',
      },
    ],
    name: 'queryTransactVerifier',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'verifier',
            type: 'address',
          },
          {
            internalType: 'bool',
            name: 'enabled',
            type: 'bool',
          },
        ],
        internalType: 'struct WrappedVerifier',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

export class IMystikoVerifier__factory {
  static readonly abi = _abi;
  static createInterface(): IMystikoVerifierInterface {
    return new utils.Interface(_abi) as IMystikoVerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IMystikoVerifier {
    return new Contract(address, _abi, signerOrProvider) as IMystikoVerifier;
  }
}
