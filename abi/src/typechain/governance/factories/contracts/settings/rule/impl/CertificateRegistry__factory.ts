/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  CertificateRegistry,
  CertificateRegistryInterface,
} from '../../../../../contracts/settings/rule/impl/CertificateRegistry';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_daoCenter',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_issuer',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'ECDSAInvalidSignature',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'length',
        type: 'uint256',
      },
    ],
    name: 'ECDSAInvalidSignatureLength',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'ECDSAInvalidSignatureS',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
    ],
    name: 'ExpiredCertificate',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidIssuer',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OnlyMystikoDAO',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'bool',
        name: 'state',
        type: 'bool',
      },
    ],
    name: 'CertificateCheck',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'issuer',
        type: 'address',
      },
    ],
    name: 'IssuerChanged',
    type: 'event',
  },
  {
    inputs: [],
    name: 'center',
    outputs: [
      {
        internalType: 'contract IMystikoGovernorCenter',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'certCheck',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'disableCertificateCheck',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'enableCertificateCheck',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getIssuerAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'issuer',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_newIssuer',
        type: 'address',
      },
    ],
    name: 'updateIssuerAddress',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'account',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'asset',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
        ],
        internalType: 'struct CertificateParams',
        name: '_params',
        type: 'tuple',
      },
    ],
    name: 'verify',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60806040526001805460ff60a01b1916600160a01b17905534801561002357600080fd5b506040516109d53803806109d58339810160408190526100429161008f565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100c2565b80516001600160a01b038116811461008a57600080fd5b919050565b600080604083850312156100a257600080fd5b6100ab83610073565b91506100b960208401610073565b90509250929050565b610904806100d16000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806323f4c8261161005b57806323f4c8261461010857806332e71ead146101105780636890b9af14610121578063e24207aa1461013557600080fd5b80630ab0d8581461008d5780631d143848146100b55780631dfab65b146100e05780631f02d715146100f5575b600080fd5b6100a061009b366004610786565b61013d565b60405190151581526020015b60405180910390f35b6001546100c8906001600160a01b031681565b6040516001600160a01b0390911681526020016100ac565b6100f36100ee366004610877565b610245565b005b6000546100c8906001600160a01b031681565b6100f361032d565b6001546001600160a01b03166100c8565b6001546100a090600160a01b900460ff1681565b6100f3610418565b600154600090600160a01b900460ff1661015957506001919050565b816040015142111561018f5781604001516040516366922ea760e01b815260040161018691815260200190565b60405180910390fd5b6000468360000151846020015185604001516040516020016101e29493929190938452606092831b6bffffffffffffffffffffffff1990811660208601529190921b166034830152604882015260680190565b604051602081830303815290604052805190602001209050600061020a8285606001516104fb565b6001549091506001600160a01b0380831691161461023b57604051635edff10b60e11b815260040160405180910390fd5b5060019392505050565b600054604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa15801561028e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b2919061089b565b6001600160a01b0316146102d95760405163177bc95160e11b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fcad349a575b7a312fc947b899cb436e2fde2cde8be518bf412258b1d7836a54e9060200160405180910390a150565b600054604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a919061089b565b6001600160a01b0316146103c15760405163177bc95160e11b815260040160405180910390fd5b6001805460ff60a01b1916908190556040517ffea2f793d2c6ac256ea0dfcb898c0e552223a2a6ed4d2c25d1ed2eca25aad3109161040e91600160a01b90910460ff161515815260200190565b60405180910390a1565b600054604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610485919061089b565b6001600160a01b0316146104ac5760405163177bc95160e11b815260040160405180910390fd5b6001805460ff60a01b1916600160a01b908117918290556040517ffea2f793d2c6ac256ea0dfcb898c0e552223a2a6ed4d2c25d1ed2eca25aad3109261040e92900460ff161515815260200190565b60008060008061050b8686610525565b92509250925061051b8282610572565b5090949350505050565b6000806000835160410361055f5760208401516040850151606086015160001a6105518882858561062f565b95509550955050505061056b565b50508151600091506002905b9250925092565b6000826003811115610586576105866108b8565b0361058f575050565b60018260038111156105a3576105a36108b8565b036105c15760405163f645eedf60e01b815260040160405180910390fd5b60028260038111156105d5576105d56108b8565b036105f65760405163fce698f760e01b815260048101829052602401610186565b600382600381111561060a5761060a6108b8565b0361062b576040516335e2f38360e21b815260048101829052602401610186565b5050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561066a57506000915060039050826106f4565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156106be573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166106ea575060009250600191508290506106f4565b9250600091508190505b9450945094915050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610737576107376106fe565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610766576107666106fe565b604052919050565b6001600160a01b038116811461078357600080fd5b50565b6000602080838503121561079957600080fd5b823567ffffffffffffffff808211156107b157600080fd5b90840190608082870312156107c557600080fd5b6107cd610714565b82356107d88161076e565b8152828401356107e78161076e565b818501526040838101359082015260608301358281111561080757600080fd5b80840193505086601f84011261081c57600080fd5b82358281111561082e5761082e6106fe565b610840601f8201601f1916860161073d565b9250808352878582860101111561085657600080fd5b80858501868501376000908301909401939093526060830152509392505050565b60006020828403121561088957600080fd5b81356108948161076e565b9392505050565b6000602082840312156108ad57600080fd5b81516108948161076e565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220d6c282e8606b15f2755c01e46e88ebe8ee3bb05f040fd4b3fae3422ad09ed4f264736f6c63430008140033';

type CertificateRegistryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CertificateRegistryConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CertificateRegistry__factory extends ContractFactory {
  constructor(...args: CertificateRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _daoCenter: string,
    _issuer: string,
    overrides?: Overrides & { from?: string },
  ): Promise<CertificateRegistry> {
    return super.deploy(_daoCenter, _issuer, overrides || {}) as Promise<CertificateRegistry>;
  }
  override getDeployTransaction(
    _daoCenter: string,
    _issuer: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(_daoCenter, _issuer, overrides || {});
  }
  override attach(address: string): CertificateRegistry {
    return super.attach(address) as CertificateRegistry;
  }
  override connect(signer: Signer): CertificateRegistry__factory {
    return super.connect(signer) as CertificateRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CertificateRegistryInterface {
    return new utils.Interface(_abi) as CertificateRegistryInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): CertificateRegistry {
    return new Contract(address, _abi, signerOrProvider) as CertificateRegistry;
  }
}
