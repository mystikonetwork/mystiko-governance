/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type {
  ICertificate,
  ICertificateInterface,
} from '../../../../../contracts/settings/rule/interfaces/ICertificate';

const _abi = [
  {
    inputs: [],
    name: 'getIssuerAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'account',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'asset',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
        ],
        internalType: 'struct CertificateParams',
        name: '_params',
        type: 'tuple',
      },
    ],
    name: 'verifyCertificate',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

export class ICertificate__factory {
  static readonly abi = _abi;
  static createInterface(): ICertificateInterface {
    return new utils.Interface(_abi) as ICertificateInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ICertificate {
    return new Contract(address, _abi, signerOrProvider) as ICertificate;
  }
}
