/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
<<<<<<< HEAD
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../../../../../common';

export interface ERC20WrapperInterface extends utils.Interface {
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../../../../common';

export interface ERC20Interface extends utils.Interface {
=======
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../../../../../common';

export interface ERC20WrapperInterface extends utils.Interface {
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'decimals()': FunctionFragment;
<<<<<<< HEAD
    'depositFor(address,uint256)': FunctionFragment;
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
    'depositFor(address,uint256)': FunctionFragment;
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
    'name()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'underlying()': FunctionFragment;
    'withdrawTo(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'decimals'
<<<<<<< HEAD
      | 'depositFor'
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
      | 'depositFor'
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
      | 'name'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'underlying'
      | 'withdrawTo',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
<<<<<<< HEAD
  encodeFunctionData(functionFragment: 'depositFor', values: [string, BigNumberish]): string;
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
  encodeFunctionData(functionFragment: 'depositFor', values: [string, BigNumberish]): string;
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'underlying', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawTo', values: [string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
<<<<<<< HEAD
  decodeFunctionResult(functionFragment: 'depositFor', data: BytesLike): Result;
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
  decodeFunctionResult(functionFragment: 'depositFor', data: BytesLike): Result;
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawTo', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

<<<<<<< HEAD
export interface ERC20Wrapper extends BaseContract {
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
export interface ERC20 extends BaseContract {
=======
export interface ERC20Wrapper extends BaseContract {
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

<<<<<<< HEAD
  interface: ERC20WrapperInterface;
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
  interface: ERC20Interface;
=======
  interface: ERC20WrapperInterface;
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

<<<<<<< HEAD
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
    depositFor(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

<<<<<<< HEAD
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
    name(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
<<<<<<< HEAD
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    withdrawTo(
      account: string,
      value: BigNumberish,
<<<<<<< HEAD
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

<<<<<<< HEAD
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
  depositFor(
    account: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

<<<<<<< HEAD
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
  name(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
<<<<<<< HEAD
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  withdrawTo(
    account: string,
    value: BigNumberish,
<<<<<<< HEAD
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

<<<<<<< HEAD
    depositFor(account: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
    depositFor(account: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(to: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(from: string, to: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
<<<<<<< HEAD
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d

    underlying(overrides?: CallOverrides): Promise<string>;

    withdrawTo(account: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
<<<<<<< HEAD
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
  };

  estimateGas: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
    depositFor(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

<<<<<<< HEAD
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
    name(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(to: string, value: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
<<<<<<< HEAD
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTo(
      account: string,
      value: BigNumberish,
<<<<<<< HEAD
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

<<<<<<< HEAD
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
    depositFor(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

<<<<<<< HEAD
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
<<<<<<< HEAD
=======
<<<<<<< HEAD:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/ERC20.ts
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTo(
      account: string,
      value: BigNumberish,
<<<<<<< HEAD
=======
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d:abi/src/typechain/governance/@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.ts
>>>>>>> b6563ba548170aeabf5c904e97e7e11f0e89d46d
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
