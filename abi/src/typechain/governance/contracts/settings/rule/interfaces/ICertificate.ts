/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../../../../common';

export type CertificateParamsStruct = {
  account: string;
  asset: string;
  deadline: BigNumberish;
  signature: BytesLike;
};

export type CertificateParamsStructOutput = [string, string, BigNumber, string] & {
  account: string;
  asset: string;
  deadline: BigNumber;
  signature: string;
};

export interface ICertificateInterface extends utils.Interface {
  functions: {
    'getIssuerAddress()': FunctionFragment;
    'verify((address,address,uint256,bytes))': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'getIssuerAddress' | 'verify'): FunctionFragment;

  encodeFunctionData(functionFragment: 'getIssuerAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'verify', values: [CertificateParamsStruct]): string;

  decodeFunctionResult(functionFragment: 'getIssuerAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result;

  events: {};
}

export interface ICertificate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICertificateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getIssuerAddress(overrides?: CallOverrides): Promise<[string]>;

    verify(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<[boolean]>;
  };

  getIssuerAddress(overrides?: CallOverrides): Promise<string>;

  verify(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    getIssuerAddress(overrides?: CallOverrides): Promise<string>;

    verify(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getIssuerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    verify(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getIssuerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verify(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
