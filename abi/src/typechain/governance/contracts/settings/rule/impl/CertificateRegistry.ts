/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../../../../common';

export type CertificateParamsStruct = {
  account: string;
  asset: string;
  deadline: BigNumberish;
  signature: BytesLike;
};

export type CertificateParamsStructOutput = [string, string, BigNumber, string] & {
  account: string;
  asset: string;
  deadline: BigNumber;
  signature: string;
};

export interface CertificateRegistryInterface extends utils.Interface {
  functions: {
    'center()': FunctionFragment;
    'certCheck()': FunctionFragment;
    'disableCertificateCheck()': FunctionFragment;
    'enableCertificateCheck()': FunctionFragment;
    'getIssuerAddress()': FunctionFragment;
    'issuer()': FunctionFragment;
    'updateIssuerAddress(address)': FunctionFragment;
    'verify((address,address,uint256,bytes))': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'center'
      | 'certCheck'
      | 'disableCertificateCheck'
      | 'enableCertificateCheck'
      | 'getIssuerAddress'
      | 'issuer'
      | 'updateIssuerAddress'
      | 'verify',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'center', values?: undefined): string;
  encodeFunctionData(functionFragment: 'certCheck', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disableCertificateCheck', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enableCertificateCheck', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getIssuerAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'issuer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateIssuerAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'verify', values: [CertificateParamsStruct]): string;

  decodeFunctionResult(functionFragment: 'center', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'certCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableCertificateCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableCertificateCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIssuerAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'issuer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateIssuerAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result;

  events: {
    'CertificateCheck(bool)': EventFragment;
    'IssuerChanged(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CertificateCheck'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IssuerChanged'): EventFragment;
}

export interface CertificateCheckEventObject {
  state: boolean;
}
export type CertificateCheckEvent = TypedEvent<[boolean], CertificateCheckEventObject>;

export type CertificateCheckEventFilter = TypedEventFilter<CertificateCheckEvent>;

export interface IssuerChangedEventObject {
  issuer: string;
}
export type IssuerChangedEvent = TypedEvent<[string], IssuerChangedEventObject>;

export type IssuerChangedEventFilter = TypedEventFilter<IssuerChangedEvent>;

export interface CertificateRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CertificateRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    center(overrides?: CallOverrides): Promise<[string]>;

    certCheck(overrides?: CallOverrides): Promise<[boolean]>;

    disableCertificateCheck(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    enableCertificateCheck(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    getIssuerAddress(overrides?: CallOverrides): Promise<[string]>;

    issuer(overrides?: CallOverrides): Promise<[string]>;

    updateIssuerAddress(
      _newIssuer: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    verify(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<[boolean]>;
  };

  center(overrides?: CallOverrides): Promise<string>;

  certCheck(overrides?: CallOverrides): Promise<boolean>;

  disableCertificateCheck(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  enableCertificateCheck(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  getIssuerAddress(overrides?: CallOverrides): Promise<string>;

  issuer(overrides?: CallOverrides): Promise<string>;

  updateIssuerAddress(
    _newIssuer: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  verify(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    center(overrides?: CallOverrides): Promise<string>;

    certCheck(overrides?: CallOverrides): Promise<boolean>;

    disableCertificateCheck(overrides?: CallOverrides): Promise<void>;

    enableCertificateCheck(overrides?: CallOverrides): Promise<void>;

    getIssuerAddress(overrides?: CallOverrides): Promise<string>;

    issuer(overrides?: CallOverrides): Promise<string>;

    updateIssuerAddress(_newIssuer: string, overrides?: CallOverrides): Promise<void>;

    verify(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'CertificateCheck(bool)'(state?: null): CertificateCheckEventFilter;
    CertificateCheck(state?: null): CertificateCheckEventFilter;

    'IssuerChanged(address)'(issuer?: null): IssuerChangedEventFilter;
    IssuerChanged(issuer?: null): IssuerChangedEventFilter;
  };

  estimateGas: {
    center(overrides?: CallOverrides): Promise<BigNumber>;

    certCheck(overrides?: CallOverrides): Promise<BigNumber>;

    disableCertificateCheck(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    enableCertificateCheck(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    getIssuerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    issuer(overrides?: CallOverrides): Promise<BigNumber>;

    updateIssuerAddress(_newIssuer: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    verify(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    center(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    certCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableCertificateCheck(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    enableCertificateCheck(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    getIssuerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateIssuerAddress(
      _newIssuer: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    verify(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
