/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../../../../common';

export interface SanctionsInterface extends utils.Interface {
  functions: {
    'center()': FunctionFragment;
    'disableSanctionsCheck()': FunctionFragment;
    'enableSanctionsCheck()': FunctionFragment;
    'isSanctioned(address)': FunctionFragment;
    'sanctionsCheck()': FunctionFragment;
    'sanctionsList()': FunctionFragment;
    'updateSanctionsListAddress(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'center'
      | 'disableSanctionsCheck'
      | 'enableSanctionsCheck'
      | 'isSanctioned'
      | 'sanctionsCheck'
      | 'sanctionsList'
      | 'updateSanctionsListAddress',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'center', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disableSanctionsCheck', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enableSanctionsCheck', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isSanctioned', values: [string]): string;
  encodeFunctionData(functionFragment: 'sanctionsCheck', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sanctionsList', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateSanctionsListAddress', values: [string]): string;

  decodeFunctionResult(functionFragment: 'center', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableSanctionsCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableSanctionsCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSanctioned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sanctionsCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sanctionsList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSanctionsListAddress', data: BytesLike): Result;

  events: {
    'SanctionsCheck(bool)': EventFragment;
    'SanctionsListChanged(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'SanctionsCheck'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SanctionsListChanged'): EventFragment;
}

export interface SanctionsCheckEventObject {
  state: boolean;
}
export type SanctionsCheckEvent = TypedEvent<[boolean], SanctionsCheckEventObject>;

export type SanctionsCheckEventFilter = TypedEventFilter<SanctionsCheckEvent>;

export interface SanctionsListChangedEventObject {
  sanctions: string;
}
export type SanctionsListChangedEvent = TypedEvent<[string], SanctionsListChangedEventObject>;

export type SanctionsListChangedEventFilter = TypedEventFilter<SanctionsListChangedEvent>;

export interface Sanctions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SanctionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    center(overrides?: CallOverrides): Promise<[string]>;

    disableSanctionsCheck(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    enableSanctionsCheck(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    isSanctioned(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    sanctionsCheck(overrides?: CallOverrides): Promise<[boolean]>;

    sanctionsList(overrides?: CallOverrides): Promise<[string]>;

    updateSanctionsListAddress(
      _sanction: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  center(overrides?: CallOverrides): Promise<string>;

  disableSanctionsCheck(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  enableSanctionsCheck(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  isSanctioned(_account: string, overrides?: CallOverrides): Promise<boolean>;

  sanctionsCheck(overrides?: CallOverrides): Promise<boolean>;

  sanctionsList(overrides?: CallOverrides): Promise<string>;

  updateSanctionsListAddress(
    _sanction: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    center(overrides?: CallOverrides): Promise<string>;

    disableSanctionsCheck(overrides?: CallOverrides): Promise<void>;

    enableSanctionsCheck(overrides?: CallOverrides): Promise<void>;

    isSanctioned(_account: string, overrides?: CallOverrides): Promise<boolean>;

    sanctionsCheck(overrides?: CallOverrides): Promise<boolean>;

    sanctionsList(overrides?: CallOverrides): Promise<string>;

    updateSanctionsListAddress(_sanction: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'SanctionsCheck(bool)'(state?: null): SanctionsCheckEventFilter;
    SanctionsCheck(state?: null): SanctionsCheckEventFilter;

    'SanctionsListChanged(address)'(sanctions?: null): SanctionsListChangedEventFilter;
    SanctionsListChanged(sanctions?: null): SanctionsListChangedEventFilter;
  };

  estimateGas: {
    center(overrides?: CallOverrides): Promise<BigNumber>;

    disableSanctionsCheck(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    enableSanctionsCheck(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    isSanctioned(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    sanctionsCheck(overrides?: CallOverrides): Promise<BigNumber>;

    sanctionsList(overrides?: CallOverrides): Promise<BigNumber>;

    updateSanctionsListAddress(
      _sanction: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    center(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableSanctionsCheck(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    enableSanctionsCheck(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    isSanctioned(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sanctionsCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sanctionsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateSanctionsListAddress(
      _sanction: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
