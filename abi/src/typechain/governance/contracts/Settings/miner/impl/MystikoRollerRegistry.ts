/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../../../../common';

export type CanDoRollupParamsStruct = {
  pool: string;
  roller: string;
  rollupSize: BigNumberish;
};

export type CanDoRollupParamsStructOutput = [string, string, BigNumber] & {
  pool: string;
  roller: string;
  rollupSize: BigNumber;
};

export interface MystikoRollerRegistryInterface extends utils.Interface {
  functions: {
    'addRollers(address[])': FunctionFragment;
    'canDoRollup((address,address,uint256))': FunctionFragment;
    'center()': FunctionFragment;
    'changeMinRollupSize(uint256)': FunctionFragment;
    'changeMinVoteTokenAmount(uint256)': FunctionFragment;
    'minRollupSize()': FunctionFragment;
    'minVoteTokenAmount()': FunctionFragment;
    'removeRollers(address[])': FunctionFragment;
    'rollers(address)': FunctionFragment;
    'vXZK()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addRollers'
      | 'canDoRollup'
      | 'center'
      | 'changeMinRollupSize'
      | 'changeMinVoteTokenAmount'
      | 'minRollupSize'
      | 'minVoteTokenAmount'
      | 'removeRollers'
      | 'rollers'
      | 'vXZK',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addRollers', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'canDoRollup', values: [CanDoRollupParamsStruct]): string;
  encodeFunctionData(functionFragment: 'center', values?: undefined): string;
  encodeFunctionData(functionFragment: 'changeMinRollupSize', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'changeMinVoteTokenAmount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'minRollupSize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minVoteTokenAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeRollers', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'rollers', values: [string]): string;
  encodeFunctionData(functionFragment: 'vXZK', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'addRollers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canDoRollup', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'center', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeMinRollupSize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeMinVoteTokenAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minRollupSize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minVoteTokenAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeRollers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rollers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vXZK', data: BytesLike): Result;

  events: {
    'MinRollupSizeChanged(uint256)': EventFragment;
    'MinVoteTokenAmountChanged(uint256)': EventFragment;
    'RollerAdded(address)': EventFragment;
    'RollerRemoved(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'MinRollupSizeChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinVoteTokenAmountChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RollerAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RollerRemoved'): EventFragment;
}

export interface MinRollupSizeChangedEventObject {
  _size: BigNumber;
}
export type MinRollupSizeChangedEvent = TypedEvent<[BigNumber], MinRollupSizeChangedEventObject>;

export type MinRollupSizeChangedEventFilter = TypedEventFilter<MinRollupSizeChangedEvent>;

export interface MinVoteTokenAmountChangedEventObject {
  _amount: BigNumber;
}
export type MinVoteTokenAmountChangedEvent = TypedEvent<[BigNumber], MinVoteTokenAmountChangedEventObject>;

export type MinVoteTokenAmountChangedEventFilter = TypedEventFilter<MinVoteTokenAmountChangedEvent>;

export interface RollerAddedEventObject {
  _relayer: string;
}
export type RollerAddedEvent = TypedEvent<[string], RollerAddedEventObject>;

export type RollerAddedEventFilter = TypedEventFilter<RollerAddedEvent>;

export interface RollerRemovedEventObject {
  _relayer: string;
}
export type RollerRemovedEvent = TypedEvent<[string], RollerRemovedEventObject>;

export type RollerRemovedEventFilter = TypedEventFilter<RollerRemovedEvent>;

export interface MystikoRollerRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MystikoRollerRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRollers(
      _newRollers: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    canDoRollup(_params: CanDoRollupParamsStruct, overrides?: CallOverrides): Promise<[boolean]>;

    center(overrides?: CallOverrides): Promise<[string]>;

    changeMinRollupSize(
      _newMinRollupSize: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    changeMinVoteTokenAmount(
      _newMinVoteTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    minRollupSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    minVoteTokenAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeRollers(
      _oldRollers: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    rollers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    vXZK(overrides?: CallOverrides): Promise<[string]>;
  };

  addRollers(_newRollers: string[], overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  canDoRollup(_params: CanDoRollupParamsStruct, overrides?: CallOverrides): Promise<boolean>;

  center(overrides?: CallOverrides): Promise<string>;

  changeMinRollupSize(
    _newMinRollupSize: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  changeMinVoteTokenAmount(
    _newMinVoteTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  minRollupSize(overrides?: CallOverrides): Promise<BigNumber>;

  minVoteTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

  removeRollers(
    _oldRollers: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  rollers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  vXZK(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addRollers(_newRollers: string[], overrides?: CallOverrides): Promise<void>;

    canDoRollup(_params: CanDoRollupParamsStruct, overrides?: CallOverrides): Promise<boolean>;

    center(overrides?: CallOverrides): Promise<string>;

    changeMinRollupSize(_newMinRollupSize: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeMinVoteTokenAmount(_newMinVoteTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    minRollupSize(overrides?: CallOverrides): Promise<BigNumber>;

    minVoteTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    removeRollers(_oldRollers: string[], overrides?: CallOverrides): Promise<void>;

    rollers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    vXZK(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'MinRollupSizeChanged(uint256)'(_size?: null): MinRollupSizeChangedEventFilter;
    MinRollupSizeChanged(_size?: null): MinRollupSizeChangedEventFilter;

    'MinVoteTokenAmountChanged(uint256)'(_amount?: null): MinVoteTokenAmountChangedEventFilter;
    MinVoteTokenAmountChanged(_amount?: null): MinVoteTokenAmountChangedEventFilter;

    'RollerAdded(address)'(_relayer?: string | null): RollerAddedEventFilter;
    RollerAdded(_relayer?: string | null): RollerAddedEventFilter;

    'RollerRemoved(address)'(_relayer?: string | null): RollerRemovedEventFilter;
    RollerRemoved(_relayer?: string | null): RollerRemovedEventFilter;
  };

  estimateGas: {
    addRollers(_newRollers: string[], overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    canDoRollup(_params: CanDoRollupParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;

    center(overrides?: CallOverrides): Promise<BigNumber>;

    changeMinRollupSize(
      _newMinRollupSize: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    changeMinVoteTokenAmount(
      _newMinVoteTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    minRollupSize(overrides?: CallOverrides): Promise<BigNumber>;

    minVoteTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    removeRollers(_oldRollers: string[], overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    rollers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vXZK(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addRollers(
      _newRollers: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    canDoRollup(_params: CanDoRollupParamsStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    center(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeMinRollupSize(
      _newMinRollupSize: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    changeMinVoteTokenAmount(
      _newMinVoteTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    minRollupSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minVoteTokenAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRollers(
      _oldRollers: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    rollers(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vXZK(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
