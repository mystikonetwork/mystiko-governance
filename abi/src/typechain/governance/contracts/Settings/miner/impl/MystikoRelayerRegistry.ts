/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../../../../common';

export type CanDoRelayParamsStruct = { pool: string; relayer: string };

export type CanDoRelayParamsStructOutput = [string, string] & {
  pool: string;
  relayer: string;
};

export interface MystikoRelayerRegistryInterface extends utils.Interface {
  functions: {
    'addRelayers(address[])': FunctionFragment;
    'canDoRelay((address,address))': FunctionFragment;
    'center()': FunctionFragment;
    'changeMinVoteTokenAmount(uint256)': FunctionFragment;
    'isRelayer(address)': FunctionFragment;
    'minVoteTokenAmount()': FunctionFragment;
    'relayers(address)': FunctionFragment;
    'removeRelayers(address[])': FunctionFragment;
    'vXZK()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addRelayers'
      | 'canDoRelay'
      | 'center'
      | 'changeMinVoteTokenAmount'
      | 'isRelayer'
      | 'minVoteTokenAmount'
      | 'relayers'
      | 'removeRelayers'
      | 'vXZK',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addRelayers', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'canDoRelay', values: [CanDoRelayParamsStruct]): string;
  encodeFunctionData(functionFragment: 'center', values?: undefined): string;
  encodeFunctionData(functionFragment: 'changeMinVoteTokenAmount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isRelayer', values: [string]): string;
  encodeFunctionData(functionFragment: 'minVoteTokenAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'relayers', values: [string]): string;
  encodeFunctionData(functionFragment: 'removeRelayers', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'vXZK', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'addRelayers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canDoRelay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'center', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeMinVoteTokenAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isRelayer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minVoteTokenAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'relayers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeRelayers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vXZK', data: BytesLike): Result;

  events: {
    'MinVoteTokenAmountChanged(uint256)': EventFragment;
    'RelayerAdded(address)': EventFragment;
    'RelayerRemoved(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'MinVoteTokenAmountChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RelayerAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RelayerRemoved'): EventFragment;
}

export interface MinVoteTokenAmountChangedEventObject {
  _amount: BigNumber;
}
export type MinVoteTokenAmountChangedEvent = TypedEvent<[BigNumber], MinVoteTokenAmountChangedEventObject>;

export type MinVoteTokenAmountChangedEventFilter = TypedEventFilter<MinVoteTokenAmountChangedEvent>;

export interface RelayerAddedEventObject {
  _relayer: string;
}
export type RelayerAddedEvent = TypedEvent<[string], RelayerAddedEventObject>;

export type RelayerAddedEventFilter = TypedEventFilter<RelayerAddedEvent>;

export interface RelayerRemovedEventObject {
  _relayer: string;
}
export type RelayerRemovedEvent = TypedEvent<[string], RelayerRemovedEventObject>;

export type RelayerRemovedEventFilter = TypedEventFilter<RelayerRemovedEvent>;

export interface MystikoRelayerRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MystikoRelayerRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRelayers(
      _newRelayers: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    canDoRelay(_params: CanDoRelayParamsStruct, overrides?: CallOverrides): Promise<[boolean]>;

    center(overrides?: CallOverrides): Promise<[string]>;

    changeMinVoteTokenAmount(
      _newMinVoteTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    isRelayer(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    minVoteTokenAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    relayers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    removeRelayers(
      _oldRelayers: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    vXZK(overrides?: CallOverrides): Promise<[string]>;
  };

  addRelayers(
    _newRelayers: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  canDoRelay(_params: CanDoRelayParamsStruct, overrides?: CallOverrides): Promise<boolean>;

  center(overrides?: CallOverrides): Promise<string>;

  changeMinVoteTokenAmount(
    _newMinVoteTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  isRelayer(_account: string, overrides?: CallOverrides): Promise<boolean>;

  minVoteTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

  relayers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  removeRelayers(
    _oldRelayers: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  vXZK(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addRelayers(_newRelayers: string[], overrides?: CallOverrides): Promise<void>;

    canDoRelay(_params: CanDoRelayParamsStruct, overrides?: CallOverrides): Promise<boolean>;

    center(overrides?: CallOverrides): Promise<string>;

    changeMinVoteTokenAmount(_newMinVoteTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    isRelayer(_account: string, overrides?: CallOverrides): Promise<boolean>;

    minVoteTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    relayers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    removeRelayers(_oldRelayers: string[], overrides?: CallOverrides): Promise<void>;

    vXZK(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'MinVoteTokenAmountChanged(uint256)'(_amount?: null): MinVoteTokenAmountChangedEventFilter;
    MinVoteTokenAmountChanged(_amount?: null): MinVoteTokenAmountChangedEventFilter;

    'RelayerAdded(address)'(_relayer?: string | null): RelayerAddedEventFilter;
    RelayerAdded(_relayer?: string | null): RelayerAddedEventFilter;

    'RelayerRemoved(address)'(_relayer?: string | null): RelayerRemovedEventFilter;
    RelayerRemoved(_relayer?: string | null): RelayerRemovedEventFilter;
  };

  estimateGas: {
    addRelayers(_newRelayers: string[], overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    canDoRelay(_params: CanDoRelayParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;

    center(overrides?: CallOverrides): Promise<BigNumber>;

    changeMinVoteTokenAmount(
      _newMinVoteTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    isRelayer(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    minVoteTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    relayers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeRelayers(_oldRelayers: string[], overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    vXZK(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addRelayers(
      _newRelayers: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    canDoRelay(_params: CanDoRelayParamsStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    center(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeMinVoteTokenAmount(
      _newMinVoteTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    isRelayer(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minVoteTokenAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayers(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRelayers(
      _oldRelayers: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    vXZK(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
