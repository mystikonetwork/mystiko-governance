/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  CustomErrors,
  CustomErrorsInterface,
} from '../../../../../contracts/staking/libs/common/CustomErrors';

const _abi = [
  {
    inputs: [],
    name: 'NotChanged',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OnlyMinter',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OnlyOperator',
    type: 'error',
  },
] as const;

const _bytecode =
  '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208b51b1e272e010dbacfdf08d5984c82ede428f1ab92ae1ac0e8cb535e6d58cc064736f6c63430008090033';

type CustomErrorsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CustomErrorsConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CustomErrors__factory extends ContractFactory {
  constructor(...args: CustomErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<CustomErrors> {
    return super.deploy(overrides || {}) as Promise<CustomErrors>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: string }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CustomErrors {
    return super.attach(address) as CustomErrors;
  }
  override connect(signer: Signer): CustomErrors__factory {
    return super.connect(signer) as CustomErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CustomErrorsInterface {
    return new utils.Interface(_abi) as CustomErrorsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): CustomErrors {
    return new Contract(address, _abi, signerOrProvider) as CustomErrors;
  }
}
