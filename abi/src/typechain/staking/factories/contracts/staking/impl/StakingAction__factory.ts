/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { StakingAction, StakingActionInterface } from '../../../../contracts/staking/impl/StakingAction';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_xzk',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_stXzk',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'target',
        type: 'address',
      },
    ],
    name: 'AddressEmptyCode',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'AddressInsufficientBalance',
    type: 'error',
  },
  {
    inputs: [],
    name: 'EnforcedPause',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ExpectedPause',
    type: 'error',
  },
  {
    inputs: [],
    name: 'FailedInnerCall',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
    ],
    name: 'OwnableInvalidOwner',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'OwnableUnauthorizedAccount',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'token',
        type: 'address',
      },
    ],
    name: 'SafeERC20FailedOperation',
    type: 'error',
  },
  {
    inputs: [],
    name: 'UnexpectedError',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'Paused',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'Unpaused',
    type: 'event',
  },
  {
    inputs: [],
    name: 'ST_XZK',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'XZK',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pause',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'paused',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'stake',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'swapToStXZK',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'swapToXZK',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'unpause',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60c060405234801561001057600080fd5b50604051610b86380380610b8683398101604081905261002f916100f5565b6000805460ff19169055338061005f57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006881610080565b506001600160a01b039182166080521660a052610128565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b80516001600160a01b03811681146100f057600080fd5b919050565b6000806040838503121561010857600080fd5b610111836100d9565b915061011f602084016100d9565b90509250929050565b60805160a051610a0961017d600039600081816101a20152818161021001528181610303015281816103440152818161060e01526106aa01526000818160db015281816102e001526106d50152610a096000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b14610140578063953de13e14610156578063a694fc3a14610177578063df637c971461018a578063e8dce4b01461019d578063f2fde38b146101c457600080fd5b80632e1a7d4d146100b95780633f4ba83a146100ce578063563d38e4146100d65780635c975abb1461011a578063715018a6146101305780638456cb5914610138575b600080fd5b6100cc6100c73660046108e0565b6101d7565b005b6100cc610279565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b60005460ff166040519015158152602001610111565b6100cc61028b565b6100cc61029d565b60005461010090046001600160a01b03166100fd565b6101696101643660046108e0565b6102ad565b604051908152602001610111565b6100cc6101853660046108e0565b6102be565b6101696101983660046108e0565b61037b565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6100cc6101d23660046108f9565b610386565b6101df6103c9565b60006101ea826103ed565b604051637a94c56560e11b815233600482015260248101849052604481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5298aca906064015b600060405180830381600087803b15801561025d57600080fd5b505af1158015610271573d6000803e3d6000fd5b505050505050565b610281610430565b610289610463565b565b610293610430565b61028960006104b5565b6102a5610430565b61028961050e565b60006102b88261054b565b92915050565b6102c66103c9565b60006102d18261054b565b90506103286001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016337f0000000000000000000000000000000000000000000000000000000000000000856105aa565b6040516340c10f1960e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401610243565b60006102b8826103ed565b61038e610430565b6001600160a01b0381166103bd57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6103c6816104b5565b50565b60005460ff16156102895760405163d93c066560e01b815260040160405180910390fd5b6000806103f861060a565b90506000610404610693565b9050811561042657816104178286610922565b6104219190610947565b610428565b835b949350505050565b6000546001600160a01b036101009091041633146102895760405163118cdaa760e01b81523360048201526024016103b4565b61046b61071e565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6105166103c9565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586104983390565b60008061055661060a565b90506000610562610693565b90508160000361057457509192915050565b80600003610595576040516316351c4b60e21b815260040160405180910390fd5b806105a08386610922565b6104289190610947565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610604908590610741565b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190610969565b905090565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa15801561066a573d6000803e3d6000fd5b60005460ff1661028957604051638dfc202b60e01b815260040160405180910390fd5b60006107566001600160a01b038416836107a9565b9050805160001415801561077b5750808060200190518101906107799190610982565b155b156107a457604051635274afe760e01b81526001600160a01b03841660048201526024016103b4565b505050565b60606107b7838360006107be565b9392505050565b6060814710156107e35760405163cd78605960e01b81523060048201526024016103b4565b600080856001600160a01b031684866040516107ff91906109a4565b60006040518083038185875af1925050503d806000811461083c576040519150601f19603f3d011682016040523d82523d6000602084013e610841565b606091505b509150915061085186838361085b565b9695505050505050565b6060826108705761086b826108b7565b6107b7565b815115801561088757506001600160a01b0384163b155b156108b057604051639996b31560e01b81526001600160a01b03851660048201526024016103b4565b50806107b7565b8051156108c75780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000602082840312156108f257600080fd5b5035919050565b60006020828403121561090b57600080fd5b81356001600160a01b03811681146107b757600080fd5b80820281158282048414176102b857634e487b7160e01b600052601160045260246000fd5b60008261096457634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561097b57600080fd5b5051919050565b60006020828403121561099457600080fd5b815180151581146107b757600080fd5b6000825160005b818110156109c557602081860181015185830152016109ab565b50600092019182525091905056fea264697066735822122010f56011e524f166f9f03cf113c8bb315f44c284d7c25c16d3b248e5a79f816d64736f6c63430008140033';

type StakingActionConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingActionConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingAction__factory extends ContractFactory {
  constructor(...args: StakingActionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _xzk: string,
    _stXzk: string,
    overrides?: Overrides & { from?: string },
  ): Promise<StakingAction> {
    return super.deploy(_xzk, _stXzk, overrides || {}) as Promise<StakingAction>;
  }
  override getDeployTransaction(
    _xzk: string,
    _stXzk: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(_xzk, _stXzk, overrides || {});
  }
  override attach(address: string): StakingAction {
    return super.attach(address) as StakingAction;
  }
  override connect(signer: Signer): StakingAction__factory {
    return super.connect(signer) as StakingAction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingActionInterface {
    return new utils.Interface(_abi) as StakingActionInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): StakingAction {
    return new Contract(address, _abi, signerOrProvider) as StakingAction;
  }
}
