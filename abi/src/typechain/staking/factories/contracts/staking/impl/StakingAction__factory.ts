/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { StakingAction, StakingActionInterface } from '../../../../contracts/staking/impl/StakingAction';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_mstko',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_stMstko',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'Paused',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'Unpaused',
    type: 'event',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pause',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'paused',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_mstkoAmount',
        type: 'uint256',
      },
    ],
    name: 'stake',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_stMstkoAmount',
        type: 'uint256',
      },
    ],
    name: 'swapMstko',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_mstkoAmount',
        type: 'uint256',
      },
    ],
    name: 'swapStMstko',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'unpause',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_stMstkoAmount',
        type: 'uint256',
      },
    ],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b506040516108e43803806108e483398101604081905261002f916100e8565b6000805460ff1916905561004233610073565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905561011b565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b80516001600160a01b03811681146100e357600080fd5b919050565b600080604083850312156100fb57600080fd5b610104836100cc565b9150610112602084016100cc565b90509250929050565b6107ba8061012a6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638456cb59116100665780638456cb59146101045780638da5cb5b1461010c578063a694fc3a14610135578063cfdcb03f14610148578063f2fde38b1461015b57600080fd5b80632e1a7d4d146100a35780633f4ba83a146100b85780635c975abb146100c05780636c612029146100db578063715018a6146100fc575b600080fd5b6100b66100b136600461067b565b61016e565b005b6100b6610216565b60005460ff1660405190151581526020015b60405180910390f35b6100ee6100e936600461067b565b610250565b6040519081526020016100d2565b6100b6610261565b6100b661029b565b60005461010090046001600160a01b03166040516001600160a01b0390911681526020016100d2565b6100b661014336600461067b565b6102d3565b6100ee61015636600461067b565b610340565b6100b6610169366004610694565b61034b565b60005460ff161561019a5760405162461bcd60e51b8152600401610191906106bd565b60405180910390fd5b60006101a5826103ec565b600254604051637a94c56560e11b815233600482015260248101859052604481018390529192506001600160a01b03169063f5298aca906064015b600060405180830381600087803b1580156101fa57600080fd5b505af115801561020e573d6000803e3d6000fd5b505050505050565b6000546001600160a01b036101009091041633146102465760405162461bcd60e51b8152600401610191906106e7565b61024e610429565b565b600061025b826104bc565b92915050565b6000546001600160a01b036101009091041633146102915760405162461bcd60e51b8152600401610191906106e7565b61024e60006104e4565b6000546001600160a01b036101009091041633146102cb5760405162461bcd60e51b8152600401610191906106e7565b61024e61053d565b60005460ff16156102f65760405162461bcd60e51b8152600401610191906106bd565b6000610301826104bc565b600254604051630ab714fb60e11b815233600482015260248101839052604481018590529192506001600160a01b03169063156e29f6906064016101e0565b600061025b826103ec565b6000546001600160a01b0361010090910416331461037b5760405162461bcd60e51b8152600401610191906106e7565b6001600160a01b0381166103e05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610191565b6103e9816104e4565b50565b6000806103f7610595565b905080156104205761041b8161041561040e610617565b8690610663565b9061066f565b610422565b825b9392505050565b60005460ff166104725760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610191565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000806104c7610595565b905080156104205761041b6104da610617565b6104158584610663565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60005460ff16156105605760405162461bcd60e51b8152600401610191906106bd565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861049f3390565b600254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156105da57600080fd5b505afa1580156105ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610612919061071c565b905090565b6001546002546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a082319060240160206040518083038186803b1580156105da57600080fd5b60006104228284610735565b60006104228284610762565b60006020828403121561068d57600080fd5b5035919050565b6000602082840312156106a657600080fd5b81356001600160a01b038116811461042257600080fd5b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561072e57600080fd5b5051919050565b600081600019048311821515161561075d57634e487b7160e01b600052601160045260246000fd5b500290565b60008261077f57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c0ba11b4166bde02e7b817eebdfd3a0ce5094748edec4f6e75c8cad925d9fdc364736f6c63430008090033';

type StakingActionConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingActionConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingAction__factory extends ContractFactory {
  constructor(...args: StakingActionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _mstko: string,
    _stMstko: string,
    overrides?: Overrides & { from?: string },
  ): Promise<StakingAction> {
    return super.deploy(_mstko, _stMstko, overrides || {}) as Promise<StakingAction>;
  }
  override getDeployTransaction(
    _mstko: string,
    _stMstko: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(_mstko, _stMstko, overrides || {});
  }
  override attach(address: string): StakingAction {
    return super.attach(address) as StakingAction;
  }
  override connect(signer: Signer): StakingAction__factory {
    return super.connect(signer) as StakingAction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingActionInterface {
    return new utils.Interface(_abi) as StakingActionInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): StakingAction {
    return new Contract(address, _abi, signerOrProvider) as StakingAction;
  }
}
