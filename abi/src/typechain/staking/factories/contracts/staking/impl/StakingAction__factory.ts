/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { StakingAction, StakingActionInterface } from '../../../../contracts/staking/impl/StakingAction';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_mstko',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_stMstko',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'AmountTooSmall',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_stMstkoAmount',
        type: 'uint256',
      },
    ],
    name: 'swapMstko',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_mstkoAmount',
        type: 'uint256',
      },
    ],
    name: 'swapStMstko',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_mstkoAmount',
        type: 'uint256',
      },
    ],
    name: 'stake',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_stMstkoAmount',
        type: 'uint256',
      },
    ],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161084238038061084283398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610784806100be6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806329ad00bf146100515780632e1a7d4d146100765780638171e8f01461008b578063a694fc3a1461009e575b600080fd5b61006461005f366004610630565b6100b1565b60405190815260200160405180910390f35b610089610084366004610630565b6100c2565b005b610064610099366004610630565b610172565b6100896100ac366004610630565b61017d565b60006100bc82610230565b92915050565b806100e05760405163617ab12d60e11b815260040160405180910390fd5b60006100eb8261026c565b600154604051632770a7eb60e21b8152336004820152602481018590529192506001600160a01b031690639dc29fac90604401600060405180830381600087803b15801561013857600080fd5b505af115801561014c573d6000803e3d6000fd5b505060015460005461016e93506001600160a01b039081169250163384610295565b5050565b60006100bc8261026c565b8061019b5760405163617ab12d60e11b815260040160405180910390fd5b60006101a682610230565b6001546000549192506101c8916001600160a01b039081169133911685610295565b6001546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561021457600080fd5b505af1158015610228573d6000803e3d6000fd5b505050505050565b60008061023b6102f5565b905080156102635761025e61024e610377565b61025885846103bb565b906103c7565b610265565b825b9392505050565b6000806102776102f5565b905080156102635761025e8161025861028e610377565b86906103bb565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526102ef9085906103d3565b50505050565b600154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561033a57600080fd5b505afa15801561034e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103729190610649565b905090565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561033a57600080fd5b60006102658284610662565b6000610265828461068f565b6000610428826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166104af9092919063ffffffff16565b8051909150156104aa578080602001905181019061044691906106b1565b6104aa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b505050565b60606104be84846000856104c6565b949350505050565b6060824710156105275760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104a1565b6001600160a01b0385163b61057e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a1565b600080866001600160a01b0316858760405161059a91906106ff565b60006040518083038185875af1925050503d80600081146105d7576040519150601f19603f3d011682016040523d82523d6000602084013e6105dc565b606091505b50915091506105ec8282866105f7565b979650505050505050565b60608315610606575081610265565b8251156106165782518084602001fd5b8160405162461bcd60e51b81526004016104a1919061071b565b60006020828403121561064257600080fd5b5035919050565b60006020828403121561065b57600080fd5b5051919050565b600081600019048311821515161561068a57634e487b7160e01b600052601160045260246000fd5b500290565b6000826106ac57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156106c357600080fd5b8151801515811461026557600080fd5b60005b838110156106ee5781810151838201526020016106d6565b838111156102ef5750506000910152565b600082516107118184602087016106d3565b9190910192915050565b602081526000825180602084015261073a8160408501602087016106d3565b601f01601f1916919091016040019291505056fea2646970667358221220bedc621ac410867602e5795502e7f76cc7339353d7788cf425e00eae7a5b4a7264736f6c63430008090033';

type StakingActionConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingActionConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingAction__factory extends ContractFactory {
  constructor(...args: StakingActionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _mstko: string,
    _stMstko: string,
    overrides?: Overrides & { from?: string },
  ): Promise<StakingAction> {
    return super.deploy(_mstko, _stMstko, overrides || {}) as Promise<StakingAction>;
  }
  override getDeployTransaction(
    _mstko: string,
    _stMstko: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(_mstko, _stMstko, overrides || {});
  }
  override attach(address: string): StakingAction {
    return super.attach(address) as StakingAction;
  }
  override connect(signer: Signer): StakingAction__factory {
    return super.connect(signer) as StakingAction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingActionInterface {
    return new utils.Interface(_abi) as StakingActionInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): StakingAction {
    return new Contract(address, _abi, signerOrProvider) as StakingAction;
  }
}
