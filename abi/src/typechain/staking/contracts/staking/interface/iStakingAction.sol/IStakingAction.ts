/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../../../../common';

export interface IStakingActionInterface extends utils.Interface {
  functions: {
    'pause()': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'swapMstko(uint256)': FunctionFragment;
    'swapStMstko(uint256)': FunctionFragment;
    'unpause()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'pause' | 'stake' | 'swapMstko' | 'swapStMstko' | 'unpause' | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stake', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'swapMstko', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'swapStMstko', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapMstko', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapStMstko', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {};
}

export interface IStakingAction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakingActionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    stake(
      _mstkoAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapMstko(
      _stMstkoAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    swapStMstko(
      _mstkoAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    withdraw(
      _stMstkoAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  stake(_mstkoAmount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  swapMstko(
    _stMstkoAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  swapStMstko(
    _mstkoAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  withdraw(
    _stMstkoAmount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    pause(overrides?: CallOverrides): Promise<void>;

    stake(_mstkoAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    swapMstko(_stMstkoAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    swapStMstko(_mstkoAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(_stMstkoAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    stake(_mstkoAmount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    swapMstko(_stMstkoAmount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    swapStMstko(_mstkoAmount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    withdraw(_stMstkoAmount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    pause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    stake(
      _mstkoAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapMstko(
      _stMstkoAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    swapStMstko(
      _mstkoAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    withdraw(
      _stMstkoAmount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
