/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../../../common';

export interface StakingActionInterface extends utils.Interface {
  functions: {
    'ST_XZK()': FunctionFragment;
    'XZK()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'swapToStXZK(uint256)': FunctionFragment;
    'swapToXZK(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ST_XZK'
      | 'XZK'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'renounceOwnership'
      | 'stake'
      | 'swapToStXZK'
      | 'swapToXZK'
      | 'transferOwnership'
      | 'unpause'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ST_XZK', values?: undefined): string;
  encodeFunctionData(functionFragment: 'XZK', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stake', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'swapToStXZK', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'swapToXZK', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'ST_XZK', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'XZK', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapToStXZK', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapToXZK', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface StakingAction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingActionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ST_XZK(overrides?: CallOverrides): Promise<[string]>;

    XZK(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    stake(_amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    swapToStXZK(_amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    swapToXZK(_amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    withdraw(_amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;
  };

  ST_XZK(overrides?: CallOverrides): Promise<string>;

  XZK(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  stake(_amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  swapToStXZK(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  swapToXZK(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  withdraw(_amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  callStatic: {
    ST_XZK(overrides?: CallOverrides): Promise<string>;

    XZK(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    swapToStXZK(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    swapToXZK(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    ST_XZK(overrides?: CallOverrides): Promise<BigNumber>;

    XZK(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    stake(_amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    swapToStXZK(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    swapToXZK(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    withdraw(_amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    ST_XZK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    XZK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    stake(_amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    swapToStXZK(_amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapToXZK(_amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    withdraw(_amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;
  };
}
